const mailman = require('_mailman')
// const vault = require('datdot-vault')
// const service = require('datdot-service')
// const chain = require('datdot-chain')

module.exports = _datdot
/**********************************************************
  DATDOT
**********************************************************/
async function _datdot (pid, port, wire) {
  const register = wire('user')
  const { signals: { to, from }, link } = register('_datdot.js')
  mailman(pid, link('_mailman'))
  // vault(link('vault'))
  // service(link('service'))
  // chain(link('chain'))
  /**********************************************************
    COMMUNICATION
  **********************************************************/
  const threads = {}

  from('user', 'type', message => {
    console.log('got msg from bob', message)
  })
  // from('user')('make_account', function receive (message) {
    // const { id, from, refs, type, data } = JSON.parse(message)
    // const replies = refs.filter(id => threads[id])
    // if (replies.length) {
    //   const messages = replies.map(id => threads[id])
    //   // return
    // }
    //
    // const msg = { to: from, refs:[id], type: 'data', data: '...'}
    // const id2 = send(msg)
    // threads[id2] = msg
  // })
  // from('chain')('hosting_start', function receive (message) {
  //   console.log(message)
  // })
  from('_mailman')(function receive (message) {
    console.log({message})
    const { id, from, refs, type, data } = JSON.parse(message)
    const replies = refs.filter(id => threads[id])
    if (replies.length) {
      const messages = replies.map(id => threads[id])
      return manageReplies(message, messages)
    }
    manageMessage(message)
  })
  // from('service', message => {
  //   const state = message.data
  //   if (state.from === '' && state.to === 'idle') return
  //   if (state.from === 'encoding_chunks' && state.to === 'done_encoding') {
  //     const message = state.context.message
  //     const dataName = state.context.dataName
  //     const encodedData = await db.get(dataName)
  //     const attestor = message.data.attestor
  //     mailbox.send({ to: attestor, type: 'chunk', data: encodedData })
  //   }
  // })
  // from('vault', message => {
  //
  // })

  // INIT
  var msg = to('user')({ type: 'ready', data: 'hello' })
  threads[msg.id] = msg

  return
}

/******************************************************************************
  HELPERS
******************************************************************************/
function manageMessage (message) {

}

function manageReplies (message, replies) {

}
