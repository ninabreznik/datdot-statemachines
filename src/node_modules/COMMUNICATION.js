const { init } = require('xstate/lib/actionTypes')

  // ------------------------------------------------------
  button.addEventListener('click', event => {
    const type = '_PUBLISH_HOSTING_PLAN'
    const data = getForm(event.target.id)

    // --------------------------------------
    // $> node bob.js
    // datdot-app.js
    const datdot_vault = require('datdot-vault')
    const datdot_chain = require('datdot-chain')
    const datdot_service = require('datdot-service')
    const datdot_ui = require('datdot-ui')
  
    const wire = require('wire-protocol-link')

    const register = wire('root')
    const protocol = register('bob')
    const { register, signal, link } = protocol
    


    const service = datdot_service(link('service')) // interpret(datdot_service_sm, 'datdot-service')
    const vault = datdot_vault(link('vault'))
    const chain = datdot_chain(link('chain'))
    const el = datdot_ui(link('ui'))

    document.body.append(el)

    signal.from('ui', async message => {
      const { /*head, refs = [],*/ type, data } = message
      // const [from, to, id] = head
      if (type == 'new_plan') {
        type = 'user_PUBLISH_HOSTING_PLAN'
        signal.to('service', { type, data })
      }

    })
    // --------------------------------------
    // datdot-service.js

    module.exports = datdot_service
    function datdot_service (wire) {
      const register = wire('datdot-app')
      const protocol = register('datdot-service', datdot_service_sm)
      const { register, signal, link } = protocol
      const machine = interpret(datdot_service_sm, 'service-sm' /*,link('service-sm')*/)


      machine.onTransition(async (state) => {
        const actions = state.actions

        signal.to('datdot-app', message)

      })



    // signal.from('ui', async message => {
    //   const { /*head, refs = [],*/ type, data } = message
    //   // const [from, to, id] = head
    //   if (type == 'new_plan') {
    //     type = 'user_PUBLISH_HOSTING_PLAN'
    //     signal.to('service', { type, data })
    //   }

    // })

      // BOB receives from UI
      const prev_msg = {
        head: [
          '/bob/ui', // 'ui',
          '/bob',
          10,
        ],
        refs: [],
        type: 'new_plan',
        data: form
      }
      signal.from('datdot-app', async message => {
        const { head, refs = [], type, data } = message
        const [from, to, id] = head
        if (type == 'user_PUBLISH_HOSTING_PLAN') {


          await init()

          machine.send({
            head: ['datdot-service', 'datdot-service', 5],
            refs: [],
            type: 'ready',
            data: null
          })
          machine.send({ type: 'ready', data: null })

          machine.send(message)

          const message = {
            head: [
              '/bob', // 'datdot-app'
              '/bob/service', // 'datdot-service'
              3
            ],
            refs: [
              [
                '/bob/ui', // 'ui',
                '/bob',
                10,
              ]
            ],
            type: 'user_PUBLISH_HOSTING_PLAN',
            data: form
          }
          // signal.to('ui', { type, data })
          // service.send({ refs: [head], type, data })
          // const event = { type, to }
          // service.send(event)

          // const send = async (name, type) =>  {
          //   var entry = await db.get(name)
          //   if (!entry) await db.put(name, '')
          //   const message = { head, refs = [], type, data }
          //   service.send({ type, to: name })
          // }
        }
      })





      // signal.from('service-sm', async message => {
      //   const { head, refs = [], type, data } = message
      //   const [from, to, id] = head
      //   if (type == '...') {
      //     // signal.to('ui', { type, data })
      //     // service.send({ refs: [head], type, data })
      //   }
      // })

    }

    // --------------------------------------

    // send(`plan-sm-${count++}`, '_HOSTING_PLAN') // spawn SM
  })
  // -------------
  // _PUBLISH_HOSTING_PLAN: {
  //   entry: (_, event) => { console.log(event) }, 
  //   actions: plan_actor //assign+spawn 
  // },
  // -------------

  // actions: plan_actor
  const plan_actor = [{
    "to": "asdf",
    "type": "xstate.spawn",
    "event": {
      "type": "SPAWN-plan-sm"
    },
    "id": "PERFORMANCE_CHECK"
  }]

  const plan_actor = { id: 'aaa', ...extraStuff }

  const plan_actor = [{
    "to": "asdf",
    "type": "xstate.send",
    "event": {
      "type": "PERFORMANCE_CHECK"
    },
    "id": "PERFORMANCE_CHECK"
  }]

  const plan_actor = ['spawnActor']
  const plan_actor = (context, event) => {
    // 1. create new plan machine?
    // 2. add machine name to context address book

    // @TODO: datdot-service receives the following event:
    // { type: '_PUBLISH_HOSTING_PLAN', data: form }

    // spawn a plan machine:
    const name = 'plan-sm-'+counter++
    const machine = require('plan_sm')
    const service = interpreter(machine, name)

  }
  // const plan_actor = assign({
  //   actors: (context, event) => {
  //     const name = event.to
  //     return [ ...context.actors, {
  //       name,
  //       ref: spawn(plan.withContext({ name }), { name, sync: true })
  //     }] 
  //   }
  // })

  // from: chain
  // to: hyper:/2t9024ujt0ujg40w4jg0w/bob/datdot-service/plan-sm-1
  // id: 57

  // ------------------------------------------------------
  chain.on('HOSTING_SETUP', message => {
    if (!isforme(message)) return

    const { head: [from, to, id], refs, type, data } = message

    const event = {
      type: 'chain_HOSTING_SETUP' // === `chain_${type}`
      
    }
    // TODO: .... fix send action
    send({ name: 'attest' }) // spawn SM
    

  })
  // ------------------------------------------------------

  // chain_HOSTING_SETUP: { actions: hosting_setup_actor },
  // -------------
  // ------------------------------------------------------
  const hosting_setup_actor = assign({
    actors: (context, event) => {
      const name = event.to
      var machine
      if (name.includes('attest')) machine = attest_setup
      else if (name.includes('host')) machine = host
      else if (name.includes('encode')) machine = encode
      return [ ...context.actors, { name, ref: spawn(machine.withContext({ name }), { name, sync: true }) } ]
    }
  })