const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent } = XState

const retryLessThan3 = (context, event) => {
  return context.retry < 3
}

module.exports = Machine(
  {
    initial: 'connect_to_encoders_and_hosters',
    context: {
      myId: '',
      retry: 0
    },
    states: {
      connect_to_encoders_and_hosters: {
        invoke: {
          id: 'connect', src: 'connect_to_encoders_and_hosters',
          onDone: {
            target: 'get_encoders_and_hosters_states',
            actions: [
              sendParent({ type: 'onDone' })
            ],
          },
          onError: {
            target: 'connect_to_encoders_and_hosters', 
            cond: retryLessThan3,
            target: 'failed',
            actions: [
              assign((context) => {
                return {
                  ...context,
                  retry: context.retry + 1
                }
              }),
              sendParent({ type: 'onError' })
            ] 
          }
        }
      },
      get_encoders_and_hosters_states: {
        // invoke: {
        //   id: 'get_states', src: 'get_last_saved_states',
        //   onDone: {
        //     target: 'data_from_encoders_to_hosters',
        //     actions: [
        //       (context, event) => console.log(event.data),
        //       sendParent('New state')
        //     ],
        //   },
        //   onError: {
        //     target: 'get_encoders_and_hosters_states', 
        //     cond: retryLessThan3,
        //     // target: 'failed',
        //     actions: [
        //       assign((context) => {
        //         return {
        //           ...context,
        //           retry: context.retry + 1
        //         }
        //       }),
        //     ] 
        //   }
        // },
        on: {
          RESOLVE: {
            target: 'data_from_encoders_to_hosters',
          },
          REJECT: { target: '' }
        }
      },
      data_from_encoders_to_hosters: {
        invoke: {
          id: 'continue_setup', src: 'get_data_and_forward_to_hoster',
          onDone: {
            target: 'submit_report',
            actions: [
              sendParent({ type: 'onDone' })
            ],
          },
          onError: {
            target: '',
            actions: [
              sendParent({ type: 'onError' })
            ],
          }      
        }
      },
      submit_report: {
        invoke: {
          id: 'send_report', src: 'send_report_to_chain',
          onDone: {
            target: 'final',
            actions: [
              sendParent({ type: 'onDone' })
            ],
          },
          onError: {
            target: '',
            actions: [
              sendParent({ type: 'onError' })
            ],
          }
        }
      },
      final: {
        // invoke: {
        //   id: 'disconnect', src: 'disconnect',
        //   onDone: {},
        //   onError: {}
        // },
        type: 'final',
      },
      failed: {
        type: 'final',
      },
    },
  },
  {
    services: {
      // connect_to_encoders_and_hosters: new Promise((resolve, reject) => { setTimeout(() => { resolve('connected to both') }, 3000) }),
      connect_to_encoders_and_hosters: new Promise((resolve, reject) => { setTimeout(() => { reject('failed to connect to ...') }, 3000) }),
      get_last_saved_states: new Promise((resolve, reject) => { setTimeout(() => { resolve('got states') }, 3000) }),
      get_data_and_forward_to_hoster: new Promise((resolve, reject) => { setTimeout(() => { resolve('sent data from encoders to hosters') }, 3000) }),
      disconnect: new Promise((resolve, reject) => { setTimeout(() => { resolve('disconnected') }, 3000) }),
      send_report_to_chain: new Promise((resolve, reject) => { setTimeout(() => { resolve('report sent') }, 3000) })
    },
    guards: {
      retryLessThan3
    }
  }
)
