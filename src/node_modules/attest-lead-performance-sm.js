const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent } = XState

module.exports = Machine({
  initial:'connecting',
  states: {
    connecting: {
      invoke: {
        id: 'connect', src: 'connect_to_hosters',
        onDone: {
          target: 'swarming',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        },
        onError: {
          target: 'finish',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        }
      },
    },
    swarming: {
      invoke: {
        id: 'join', src: 'join_attestors_swarm',
        onDone: {
          target: 'idle',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        },
        onError: {
          target: 'disconnecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        }
      },
    },
    idle: {
      entry: () => console.log('attest-sm: idle_state'),
      on: {
        HOSTER_REPORT: {
          target: 'receiving'
        },
        ORGANIZE_PERFORMANCE_CHECK: {
          target: 'organizing'
        },
        SEND_REPORT: {
          target: 'reporting'
        },
      }
    },
    receiving: {
      invoke: {
        id: 'receive', src: 'receive_hoster_reports',
        onDone: {
          target: 'comparing',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        },
        onError: {
          target: 'disconnecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        }
      },
    },
    comparing: {
      invoke: {
        id: 'compare', src: 'compare_reports_with_other_attestors',
        onDone: {
          target: 'storing',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        },
        onError: {
          target: 'disconnecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        }
      },
    },
    storing: {
      invoke: {
        id: 'store', src: 'store_results_to_hyperlog',
        onDone: {
          target: 'idle',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        },
        onError: {
          target: 'disconnecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        }
      },
    },
    organizing: {
      invoke: {
        id: 'store', src: 'order_chunks_retrieval',
        onDone: {
          target: 'collecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        },
        onError: {
          target: 'disconnecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        }
      },
    },
    collecting: {
      invoke: {
        id: 'collect', src: 'collect_attestors_reports',
        onDone: {
          target: 'idle',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        },
        onError: {
          target: 'disconnecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        }
      },
    },
    reporting: {
      invoke: {
        id: 'store', src: 'report_performance_benchmark_to_chain',
        onDone: {
          target: 'disconnecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        },
        onError: {
          target: 'disconnecting',
          actions: (context, event) => console.log('attest-lead-sm:', event.data)
        }
      },
    },
    disconnecting: {
      invoke: {
        id: 'disconnect', src: 'disconnect',
        onDone: {
          target: 'finish',
          actions: (context, event) => console.log('attest-sm:', event.data)
        },
        onError: {
          target: 'finish',
          actions: (context, event) => console.log('attest-sm:', event.data)
        }
      },
    },
    finish: {
      type: 'final',
      data: {type: 'finished'}
    }
  }
}, {
  services: {
    connect_to_hosters: new Promise((resolve, reject) => { setTimeout(() => { resolve('connected') }, 3000) }),
    join_attestors_swarm: new Promise((resolve, reject) => { setTimeout(() => { resolve('joined') }, 3000) }),
    receive_hoster_reports: new Promise((resolve, reject) => { setTimeout(() => { resolve('received') }, 3000) }),
    compare_reports_with_other_attestors: new Promise((resolve, reject) => { setTimeout(() => { resolve('compared') }, 3000) }),
    store_results_to_hyperlog: new Promise((resolve, reject) => { setTimeout(() => { resolve('stored') }, 3000) }),
    order_chunks_retrieval: new Promise((resolve, reject) => { setTimeout(() => { resolve('ordered') }, 3000) }),
    collect_attestors_reports: new Promise((resolve, reject) => { setTimeout(() => { resolve('collected') }, 3000) }),
    report_performance_benchmark_to_chain: new Promise((resolve, reject) => { setTimeout(() => { resolve('reported') }, 3000) }),
    disconnect: new Promise((resolve, reject) => { setTimeout(() => { resolve('disconnected') }, 3000) })
  }
})
