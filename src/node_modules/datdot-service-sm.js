const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent, actions } = XState
const { choose } = actions

const encode = require('encode-sm')
const host = require('host-sm')
const attest_setup = require('attest-setup-sm')
const attest_storage = require('attest-storage-sm')
const attest_performance = require('attest-performance-sm')
const attest_lead_performance = require('attest-lead-performance-sm')

const spawnSetupActor = (context, event) => {
  const name = event.name
  var machine
  if (name.includes('attest')) machine = attest_setup
  else if (name.includes('host')) machine = host
  else if (name.includes('encode')) machine = encode
  return [ ...context.actors, { name, ref: spawn(machine, name, { sync: true }) } ]
}

const storage_proof_action = choose([
  { cond: (context, event) => event.name.includes('attest'),
    actions: assign({ actors: (context, event) => {
      const name = event.name
      return [ ...context.actors, { name, ref: spawn(attest_storage, name, { sync: true }) } ]
      }
    })
  },
  { cond: (context, event) => event.name.includes('host'),
    actions: send('STORAGE_PROOF', { to: (context, event) => event.name })
  }
])

const performance_check_action = choose([
  { cond: (context, event) => event.name.includes('attest'),
    actions: assign({ actors: (context, event) => {
      const name = event.name
      return [ ...context.actors, { name, ref: spawn(attest_performance, name, { sync: true }) } ]
      }
    })
  },
  { cond: (context, event) => event.name.includes('host'),
    actions: send('PERFORMANCE_CHECK', { to: (context, event) => event.name })
  }
])

module.exports = Machine({
  id: 'datdot-service',
  initial: 'idle',
  context: {
    actors: []
  },
  states: {
    idle: {
      on: {
        chain_HOSTING_SETUP: {
          actions: assign({
            actors: spawnSetupActor
          }),
        },
        chain_STORAGE_PROOF: {
          actions: storage_proof_action
        },
        chain_PERFORMANCE_CHECK: {
          // entry: console.log('FOOOOOOO'),
          actions: performance_check_action
        },
        chain_LEAD_PERFORMANCE_CHECK: {
          actions: assign({ 
            actors: (context, event) => {
              const name = event.name
              return [ ...context.actors, { name, ref: spawn(attest_lead_performance, name, { sync: true }) } ]
            }
          })
        },
        _SWARM_CHECK: {
          actions: send('SWARM_CHECK', { to: (context, event) => event.name }),
        },
        _REPORT_REVIEW: {
          actions: send('REPORT_REVIEW', { to: (context, event) => event.name }),
        },
        _HOSTER_REPORT: {
          actions: send('HOSTER_REPORT', { to: (context, event) => event.name }),
        },
        _ORGANIZE_PERFORMANCE_CHECK: {
          actions: send('ORGANIZE_PERFORMANCE_CHECK', { to: (context, event) => event.name }),
        },
        _SEND_REPORT: {
          actions: send('SEND_REPORT', { to: (context, event) => event.name }),
        },
        // REJECT: {
        //   actions: send('REJECT', { to: (context, event) => event.name })
        // },
        // HOSTING_REPAIR: {
        //   target: 'hosting_repair'
        // },
        // HOSTING_PAUSE: {
        //   target: 'hosting_pause'
        // },
        // HOSTING_RESUME: {
          //   target: 'hosting_resume'
          // },
          // HOSTING_END: {
          //   target: 'hosting_end'
          // },
      },
    },
    host: { on: {}, ...host },
    encode: { on: {}, ...encode },
    attest_setup: { on: {}, ...attest_setup },
    attest_storage: { on: {}, ...attest_storage },
    attest_performance: { on: {}, ...attest_performance },
  }
  })
