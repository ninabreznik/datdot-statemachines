const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent, actions } = XState
const { choose } = actions

const account = require('account-sm')
const plan = require('plan-sm')
const encode = require('encode-sm')
const host = require('host-sm')
const attest_setup = require('attest-setup-sm')
const attest_storage = require('attest-storage-sm')
const attest_performance = require('attest-performance-sm')
const attest_lead_performance = require('attest-lead-performance-sm')

const plan_actor = assign({ actors: (context, event) => {
  const name = event.to
  return [ ...context.actors, { name, ref: spawn(plan.withContext({ name }), { name, sync: true }) } ] 
} })

const account_actor = assign({ actors: (context, event) => {
  const name = event.to
  return [ ...context.actors, { name, ref: spawn(account.withContext({ name }), { name, sync: true }) } ]
} })

const hosting_setup_actor = assign({ actors: (context, event) => {
  const name = event.to
  var machine
  if (name.includes('attest')) machine = attest_setup
  else if (name.includes('host')) machine = host
  else if (name.includes('encode')) machine = encode
  return [ ...context.actors, { name, ref: spawn(machine.withContext({ name }), { name, sync: true }) } ]
} })

const storage_proof_actor = choose([
  { cond: (context, event) => event.to.includes('attest'),
    actions: assign({ actors: (context, event) => {
      const name = event.to
      return [ ...context.actors, { name, ref: spawn(attest_storage.withContext({ name }), { name, sync: true }) } ]
      }
    })
  },
  { cond: (context, event) => event.to.includes('host'),
    actions: send('STORAGE_PROOF', { to: (_, event) => event.to })
  }
])

const lead_performance_actor = assign({ actors: (context, event) => {
  const name = event.to
  return [ ...context.actors, { name, ref: spawn(attest_lead_performance.withContext({ name }), { name, sync: true }) } ]
} })

const performance_check_actor = choose([
  { cond: (context, event) => event.to.includes('attest'),
    actions: assign({ actors: (context, event) => {
      const name = event.to
      return [ ...context.actors, { name, ref: spawn(attest_performance.withContext({ name }), { name, sync: true }) } ]
      }
    })
  },
  { cond: (context, event) => event.to.includes('host'),
    actions: send('PERFORMANCE_CHECK', { to: (_, event) => event.to })
  }
])

const resume_actor = assign({ actors: (context, event) => {
  const name = event.to
  return [ ...context.actors, { name, ref: spawn(attest_lead_performance.withContext({ name }), { name, sync: true }) } ]
} })

// -------------------------------------------------------
const name = 'plan-sm-3'
const context = {}
const state = '' // current state
const action = { type: 'spawn', data: { name, context, state } }

const action = 'spawnPlan'

const spawnPlan = (context, event) => {
  // const event = { type: '_PUBLISH_HOSTING_PLAN', data: form }
  // const context = { name } // datdot-service-sm
   
  // ...


}

const plan = require('plan-sm')
// const send2 = send('PERFORMANCE_CHECK', { to: 'asdf', /*id: 123, type: 'xxx', event: 'aaa'*/ })
const send2 = spawn(plan.withContext({ name: 'aaa' }), { name: 'aaa', sync: true })
console.log(send2.toJSON())
console.log(JSON.stringify({ send2 }, 0, 2))

// // TODO: fix plan_actor
// const plan_actor = (context, event) => {
//   const { type = 'chain_HOSTING_SETUP', data} = event

//   // @TODO: spawn plan machine
//   // @TODO: save name in address book
//   // ...

// }
// ----------------------------------------------------

module.exports = Machine({
  id: 'datdot-service',
  initial: 'idle',
  context: {
    actors: []
  },
  states: {
    idle: {
      on: {

        user_REGISTER_ACCOUNT: { actions: account_actor },

        user_PUBLISH_HOSTING_PLAN: {
          entry: (_, event) => { console.log(event) }, 
          actions: plan_actor 
        },
        chain_PLAN_CONFIRMED: { actions: send('PLAN_CONFIRMED', { to: (_, event) => event.to }) },
        chain_PLAN_UPDATE: { actions: send('PLAN_UPDATE', { to: (_, event) => event.to }) },
        chain_PLAN_PAUSE: { actions: send('PLAN_PAUSE', { to: (_, event) => event.to }) },
        chain_PLAN_RESUME: { actions: send('PLAN_RESUME', { to: (_, event) => event.to }) },
        chain_PLAN_END: { actions: send('PLAN_END', { to: (_, event) => event.to }) },

        chain_HOSTING_SETUP: { actions: hosting_setup_actor },

        chain_STORAGE_PROOF: { actions: storage_proof_actor },

        chain_PERFORMANCE_CHECK: { actions: performance_check_actor },
        _SWARM_CHECK: { actions: send('SWARM_CHECK', { to: (_, event) => event.to }) },
        _REPORT_REVIEW: { actions: send('REPORT_REVIEW', { to: (_, event) => event.to }) },

        chain_LEAD_PERFORMANCE_CHECK: { actions: lead_performance_actor },
        _HOSTER_REPORT: { actions: send('HOSTER_REPORT', { to: (_, event) => event.to }) },
        _ORGANIZE_PERFORMANCE_CHECK: { 
          entry: (_, event) => console.log(event),
          actions: send('ORGANIZE_PERFORMANCE_CHECK', { to: (_, event) => event.to }) 
        },
        _SEND_REPORT: { actions: send('SEND_REPORT', { to: (_, event) => event.to }) },

      },
    },
  }
  })
