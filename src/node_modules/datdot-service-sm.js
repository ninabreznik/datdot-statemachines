const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent } = XState

const encode = require('encode-sm')
const host = require('host-sm')
const attest_setup = require('attest-setup-sm')
const attest_storage = require('attest-storage-sm')
// const attest_performance = require('attest-performance-sm')

const spawnSetupActor = (context, event) => {
  const name = event.name
  var machine
  if (name.includes('attest-setup')) machine = attest_setup
  else if (name.includes('host-setup')) machine = host
  else if (name.includes('encode')) machine = encode
  return [ ...context.actors, { name, ref: spawn(machine, name, { sync: true }) } ]
}

module.exports = Machine({
  id: 'datdot-service',
  initial: 'idle',
  context: {
    actors: [],
  },
  states: {
    idle: {
      on: {
        HOSTING_SETUP: {
          actions: assign({
            actors: spawnSetupActor
          }),
        },
        RESOLVE: {
          actions: send('RESOLVE', { to: (context, event) => event.name }),
        },
        REJECT: {
          actions: send('REJECT', { to: (context, event) => event.name })
        },
        // HOSTING_REPAIR: {
        //   target: 'hosting_repair'
        // },
        // HOSTING_PAUSE: {
        //   target: 'hosting_pause'
        // },
        // HOSTING_RESUME: {
          //   target: 'hosting_resume'
          // },
          // HOSTING_END: {
          //   target: 'hosting_end'
          // },
        STORAGE_PROOF: {
          actions: [
            assign({
              actors: (context, event) => {
                const name = event.name
                if (name.includes('attest-storage')) {
                  return [ ...context.actors, { name, ref: spawn(attest_storage, name, { sync: true }) } ]
                }
              }, 
            }),
            (context, event) => { 
              const name = event.name
              if (name.includes('host-setup')) { send({ type: 'STORAGE_PROOF', to: name }) }
            }
          ] 
        },
        PERFORMANCE_CHECK: {
          actions: assign({
            actors: (context, event) => {
              const name = event.name
              var machine
              if (name.includes('attest-lead')) machine = attest_lead_performance
              else if (name.includes('attest')) machine = attest_performance
              else if (name.includes('host')) machine = host
              return [
                ...context.actors,
                { name, ref: spawn(machine, name, { sync: true }) },
              ]
            }
          }),
        },
      },
    },
    host: { on: {}, ...host },
    encode: { on: {}, ...encode },
    attest_setup: { on: {}, ...attest_setup },
    attest_storage: { on: {}, ...attest_storage },
    // attest_performance: { on: {}, ...attest_performance },
  }
  })
