const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent } = XState

const encode = require('encode-hosting-start-sm')
const host = require('host-hosting-start-sm')
const attest = require('attest-hosting-start-sm')


module.exports = Machine({
  id: 'datdot-service',
  initial: 'idle',
  context: {
    actors: [],
  },
  states: {
    idle: {
      on: {
        HOSTING_SETUP: {
          actions: assign({
            actors: (context, event) => {
              const name = `${event.role}-${event.id}`
              if (event.role === 'attest') var role = attest
              else if (event.role === 'host') var role = host
              else if (event.role === 'encode') var role = encode
              return [
                ...context.actors,
                { name, ref: spawn(role, name, { sync: true }) },
              ]
            }
          }),
        },
        RESOLVE: {
          actions: send('RESOLVE', { to: (context, event) => `${event.role}-${event.id}` }),
        },
        REJECT: {
          actions: send('REJECT', { to: (context, event) => `${event.role}-${event.id}` })
        },
        // HOSTING_REPAIR: {
        //   target: 'hosting_repair'
        // },
        // HOSTING_PAUSE: {
        //   target: 'hosting_pause'
        // },
        // HOSTING_RESUME: {
          //   target: 'hosting_resume'
          // },
          // HOSTING_END: {
          //   target: 'hosting_end'
          // },
        // PROOF_OF_STORAGE_REQUEST: {
        //   target: 'proof_of_storage'
        // },
        // PERFORMANCE_BENCHMARK: {
        //   target: 'performance_benchmark'
        // },
        // HOSTING_PAUSE: {
        //   target: 'hosting_pause'
        // },
        // HOSTING_END: {
        //   target: 'hosting_end'
        // },
      },
    },
    host: {
      on: {},
      ...host,
    },
    encode: {
      on: {},
      ...encode,
    },
    attest: {
      on: {},
      ...attest,
    },
  }
  })
