const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent, actions } = XState
const { choose } = actions

const encode = require('encode-sm')
const host = require('host-sm')
const attest_setup = require('attest-setup-sm')
const attest_storage = require('attest-storage-sm')
// const attest_performance = require('attest-performance-sm')

const spawnSetupActor = (context, event) => {
  const name = event.name
  var machine
  if (name.includes('attest')) machine = attest_setup
  else if (name.includes('host')) machine = host
  else if (name.includes('encode')) machine = encode
  return [ ...context.actors, { name, ref: spawn(machine, name, { sync: true }) } ]
}

const choose_action = choose([
  {  
    cond: (context, event) => event.name.includes('attest'),
    actions: assign({
      actors: (context, event) => {
        const name = event.name
        return [ ...context.actors, { name, ref: spawn(attest_storage, name, { sync: true }) } ]
      }
    })
  },
  {  
    cond: (context, event) => event.name.includes('host'),
    actions: send('STORAGE_PROOF', { to: (context, event) => event.name })
  },
])

module.exports = Machine({
  id: 'datdot-service',
  initial: 'idle',
  context: {
    actors: []
  },
  states: {
    idle: {
      on: {
        HOSTING_SETUP: {
          actions: assign({
            actors: spawnSetupActor
          }),
        },
        STORAGE_PROOF: {
          actions: choose_action
        },
        // RESOLVE: {
        //   actions: send('RESOLVE', { to: (context, event) => event.name }),
        // },
        // REJECT: {
        //   actions: send('REJECT', { to: (context, event) => event.name })
        // },
        // HOSTING_REPAIR: {
        //   target: 'hosting_repair'
        // },
        // HOSTING_PAUSE: {
        //   target: 'hosting_pause'
        // },
        // HOSTING_RESUME: {
          //   target: 'hosting_resume'
          // },
          // HOSTING_END: {
          //   target: 'hosting_end'
          // },
        // PERFORMANCE_CHECK: {
        //   actions: assign({
        //     actors: (context, event) => {
        //       const name = event.name
        //       var machine
        //       if (name.includes('attest-lead')) machine = attest_lead_performance
        //       else if (name.includes('attest')) machine = attest_performance
        //       else if (name.includes('host')) machine = host
        //       return [
        //         ...context.actors,
        //         { name, ref: spawn(machine, name, { sync: true }) },
        //       ]
        //     }
        //   }),
        // },
      },
    },
    host: { on: {}, ...host },
    encode: { on: {}, ...encode },
    attest_setup: { on: {}, ...attest_setup },
    attest_storage: { on: {}, ...attest_storage },
    // attest_performance: { on: {}, ...attest_performance },
  }
  })
