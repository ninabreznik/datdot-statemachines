const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent, actions } = XState
const { choose } = actions

const plan = require('plan-sm')
const encode = require('encode-sm')
const host = require('host-sm')
const attest_setup = require('attest-setup-sm')
const attest_storage = require('attest-storage-sm')
const attest_performance = require('attest-performance-sm')
const attest_lead_performance = require('attest-lead-performance-sm')

const spawnSetupActor = (context, event) => {
  const name = event.name
  var machine
  if (name.includes('attest')) machine = attest_setup
  else if (name.includes('host')) machine = host
  else if (name.includes('encode')) machine = encode
  return [ ...context.actors, { name, ref: spawn(machine, name, { sync: true }) } ]
}

const storage_proof_action = choose([
  { cond: (context, event) => event.name.includes('attest'),
    actions: assign({ actors: (context, event) => {
      const name = event.name
      return [ ...context.actors, { name, ref: spawn(attest_storage, name, { sync: true }) } ]
      }
    })
  },
  { cond: (context, event) => event.name.includes('host'),
    actions: send('STORAGE_PROOF', { to: (context, event) => event.name })
  }
])

const performance_check_action = choose([
  { cond: (context, event) => event.name.includes('attest'),
    actions: assign({ actors: (context, event) => {
      const name = event.name
      return [ ...context.actors, { name, ref: spawn(attest_performance, name, { sync: true }) } ]
      }
    })
  },
  { cond: (context, event) => event.name.includes('host'),
    actions: send('PERFORMANCE_CHECK', { to: (context, event) => event.name })
  }
])

module.exports = Machine({
  id: 'datdot-service',
  initial: 'idle',
  context: {
    actors: []
  },
  states: {
    idle: {
      on: {
        chain_HOSTING_SETUP: { actions: assign({ actors: spawnSetupActor }) },

        chain_STORAGE_PROOF: { actions: storage_proof_action },

        chain_PERFORMANCE_CHECK: { actions: performance_check_action },
        _SWARM_CHECK: { actions: send('SWARM_CHECK', { to: (context, event) => event.name }) },
        _REPORT_REVIEW: { actions: send('REPORT_REVIEW', { to: (context, event) => event.name }) },

        chain_LEAD_PERFORMANCE_CHECK: {
          actions: assign({ 
            actors: (context, event) => {
              const name = event.name
              return [ ...context.actors, { name, ref: spawn(attest_lead_performance, name, { sync: true }) } ]
            }
          })
        },
        _HOSTER_REPORT: { actions: send('HOSTER_REPORT', { to: (context, event) => event.name }) },
        _ORGANIZE_PERFORMANCE_CHECK: { actions: send('ORGANIZE_PERFORMANCE_CHECK', { to: (context, event) => event.name }) },
        _SEND_REPORT: { actions: send('SEND_REPORT', { to: (context, event) => event.name }) },

        _HOSTING_PLAN_SUBSCRIPTION: {
          actions: assign({ 
            actors: (context, event) => {
              const name = event.name
              return [ ...context.actors, { name, ref: spawn(plan, name, { sync: true }) } ]
            }
          })
        },
        chain_PLAN_UPDATE: { actions: send('PLAN_UPDATE', { to: (context, event) => event.name }) },
        chain_PLAN_PAUSE: { actions: send('PLAN_PAUSE', { to: (context, event) => event.name }) },
        chain_PLAN_RESUME: { actions: send('PLAN_RESUME', { to: (context, event) => event.name }) },
        chain_PLAN_END: { actions: send('PLAN_END', { to: (context, event) => event.name }) },
      },
    },
  }
  })
