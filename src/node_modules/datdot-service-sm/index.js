const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent } = XState
const encode_SM = require('encode-sm')
const attest_SM = require('attest-sm')
const encode = require('encode-sm/setup')
const host = require('host-sm/setup')
const attest = require('attest-sm/setup')


module.exports = Machine({
  id: 'datdot-service',
  initial: 'idle',
  context: {},
  states: {
    idle: {
      on: {
        SETUP_ATTEST: {
          actions: assign({
            ref: (context, event) => [
              { name: event.key, ref: spawn(attest, event.key, { sync: true }) }
            ]
          })
        },
        SETUP_ENCODE: {
          actions: assign({
            ref: (context, event) => [
              { name: event.key, ref: spawn(encode, event.key, { sync: true }) }
            ]
          })
        },
        SETUP_HOST: {
          actions: assign({
            ref: (context, event) => [
              { name: event.key, ref: spawn(host, event.key, { sync: true }) }
            ]
          })
        },
        RESOLVE: {
          actions: send('RESOLVE', {
            to: (context, event) => event.key
          })
        },
        REJECT: {
          actions: send('REJECT', {
            to: (context, event) => event.key
          })
        },
        onDone: {
          // actions: () => console.log('done')
        },
        HOSTING_REPAIR: {
          target: ['attest']
        },
        // EVENT_PROOF_OF_STORAGE_REQUEST: {
        //   target: 'proof_of_storage'
        // },
        // EVENT_PERFORMANCE_BENCHMARK: {
        //   target: 'performance_benchmark'
        // },
        // EVENT_HOSTING_PAUSE: {
        //   target: 'hosting_pause'
        // },
        // EVENT_HOSTING_END: {
        //   target: 'hosting_end'
        // },
      },
    },
    // host: {
    //   on: {},
    //   ...host,
    // },
    encode: {
      on: {},
      ...encode,
    },
    attest: {
      on: {},
      ...attest,
    },
  }
  })
