const XState = require('xstate')
const { Machine, assign, spawn, send, sendParent } = XState

module.exports = Machine({
  initial: 'find_last_state',
  states: {
    find_last_state: {
      entry: ['find_last_state'],
      on: {
        RESOLVE: 'connect_to_attestor',
        REJECT: 'fail_find_last_state' // retry
      },
    },
    fail_find_last_state: {
      on: {
        RETRY: 'find_last_state'
      }
    },
    connect_to_attestor: {
      actions: ['if_not_connected_p2plex_to_attestor'],
      exit: ['store_current_state'],
      on: {
        RESOLVE: 'encode_data_and_send_to_attestor',
        REJECT: 'fail_connect_to_attestor'  // retry
      }
    },
    encode_data_and_send_to_attestor: {
      actions: ['get_and_verify_original_data', 'encode', 'send_data_to_attestor'], // streaming, all happening in parallel
      exit: ['store_current_state', 'disconnect'],
      on: {
        RESOLVE: 'final',
        REJECT: 'fail_encode_data_and_send_to_attestor'  // retry
      }
    },
    fail_find_last_state: {
      on: {
        RETRY: 'fail_find_last_state'
      }
    },
    fail_connect_to_attestor: {
      on: {
        RETRY: 'connect_to_attestor',
        EXIT: ''
      }
    },
    fail_encode_data_and_send_to_attestor: {
      on: {
        RETRY: 'encode_data_and_send_to_attestor'
      }
    },
    final: {
      type: 'final'
    },
  }
})
