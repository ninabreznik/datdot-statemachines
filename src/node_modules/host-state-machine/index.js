const XState = require('xstate')
const { Machine } = XState
const hosting_start = require('./sub-hosting-start')
const hosting_repair = require('./sub-hosting-repair')

module.exports = Machine({
  initial: 'idle',
  states: {
    idle: {
      id: 'idleState',
      on: {
        EVENT_HOSTING_START: {
          target: 'hosting_start'
        },
        EVENT_HOSTING_REPAIR: {
          target: 'hosting_repair'
        },
      },
    },
    hosting_start: {
      on: {},
      ...hosting_start
    },
    hosting_repair: {
      on: {},
      ...hosting_repair
    },

    hosting: {
      entry: ['join_swarm_and_seed'],
      on: {
        EVENT_HOSTING_END: {
          target: 'hosting_end'
        },
        EVENT_PROVIDE_PROOF_OF_STORAGE: {
          target: 'provide_proof_of_storage_response'
        },
        EVENT_PERFORMANCE_BENCHMARK: {
          target: 'performance_benchmark_response'
        }
      }
    },
    hosting_end: {
      entry: ['exit_swarm', 'delete_data'],
      onDone: 'idle'
    },
    provide_proof_of_storage_response: {
      entry: ['p2plex_to_attestor', 'provide_proof'],
      exit: ['disconnect'],
      on: {
        RESOLVE: 'hosting',
        REJECT: 'failure_provide_proof_of_storage'
      }
    },
    performance_benchmark_response: {
      entry: ['p2plex_connect_to_attestors_observers', 'start_sending_reports'],
      exit: ['disconnect'],
      on: {
        RESOLVE: 'hosting',
        REJECT: 'failure_performance_benchmark'
      }
    },
    failure_provide_proof_of_storage: {
      on: {
        RETRY: 'provide_proof_of_storage_response'
      }
    },
    failure_performance_benchmark: {
      on: {
        RETRY: 'performance_benchmark_response'
      }
    },
  }
})
