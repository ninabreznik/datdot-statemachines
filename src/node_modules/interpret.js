const machines = {}

module.exports = interpret

function interpret (machine_definition/*, wire*/) {

  // const register = wire('machine-user')
  // const protocol = register('interpret')
  // const { id, register, signal, link } = protocol
  // const name = id

  const name = `machine-${Object.keys(machines).length}`
  const listeners = []
  const data = {
    current_state: machine_definition.initial,
    context: {
      name
    },
  }
  const machine = { send, on_transition, start, stop }
  machines[name] = { name, data, machine }
  return service

  function send (message) {
    // var entry = await db.get(name)
    // if (!entry) await db.put(name, JSON.stringify(data))
    // // --------------------------------------
    // // USAGE EXAMPLE: _PUBLISH_HOSTING_PLAN
    // const { head: [from, to, id], refs, type, data } = message
    // service.send({ type: '_PUBLISH_HOSTING_PLAN', data })
    // // --------------------------------------
    const { head, refs = [], type, data } = message

    // name = 'machine-1'
    
    const message = {
      head: [
        '/bob', // 'datdot-app'
        '/bob/service', // 'datdot-service'
        3
      ],
      refs: [
        [
          '/bob/ui', // 'ui',
          '/bob',
          10,
        ]
      ],
      type: 'user_PUBLISH_HOSTING_PLAN',
      data: form
    }
  
    // const name = `machine-${Object.keys(machines).length}`
  
    if (!head) {
      from = 'new_plan_ui'
      to = name
      head = [from, to, my_feed.length]
    }
    // my_feed.append(message)

    const state = machine_definition.transition(data.current_state, message)

    // // --------------------------------------
    // // USAGE EXAMPLE: chain_HOSTING_SETUP
    // // TODO: fix event message
    // const { head: [from, to, id], refs, type, data } = message

    // const event = {
    //   type: 'chain_HOSTING_SETUP', // === `chain_${type}`
    //   data
    // }
    // // TODO: .... fix send action
    // service.send(event)
    // send({ name: 'attest' }) // spawn SM

    // // --------------------------------------
  }
  function on_transition (cb) { listeners.push(cb) }
  function start () {}
  function stop () {}
}