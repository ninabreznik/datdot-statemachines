const XState = require('xstate')
const { Machine, interpret, assign, sendParent } = XState

module.exports = Machine({
  initial: 'subscribing',
  context: {},
  states: {
    subscribing: {
      invoke: {
        id: 'subscribe', src: { type: 'subscribe_to_hosting_plan', data: (context) => context },
        onDone: {
          target: 'publishing',
          actions: (_, event) => console.log('plan-sm:', event.data)
        },
        onError: {
          target: 'finish',
          actions: (_, event) => console.log('plan-sm:', event.data)
        }
      },
    },
    active: {
      entry: () => console.log('plan-sm: active hosting state'),
      on: {
        PLAN_CONFIRMED: {
          target: '' // update db with plan id
        },
        PLAN_UPDATE: {
          target: 'updating'
        },
        PLAN_PAUSE: {
          target: 'pausing'
        },
        PLAN_RESUME: {
          target: 'resuming'
        },
        PLAN_END: {
          target: 'ending'
        },
      },
    },
    updating: {
      invoke: {
        id: 'update', src: 'update_hosting_plan',
        onDone: {
          target: 'publishing',
          actions: (_, event) => console.log('plan-sm:', event.data)
        },
        onError: {
          target: 'finish',
          actions: (_, event) => console.log('plan-sm:', event.data)
        }
      },
    },
    pausing: {
      invoke: {
        id: 'pause', src: 'pause_hosting_plan',
        onDone: {
          target: 'publishing',
          actions: (_, event) => console.log('plan-sm:', event.data)
        },
        onError: {
          target: 'finish',
          actions: (_, event) => console.log('plan-sm:', event.data)
        }
      },
    },
    resuming: {
      invoke: {
        id: 'pause', src: 'resume_hosting_plan',
        onDone: {
          target: 'publishing',
          actions: (_, event) => console.log('plan-sm:', event.data)
        },
        onError: {
          target: 'finish',
          actions: (_, event) => console.log('plan-sm:', event.data)
        }
      },
    },
    ending: {
      invoke: {
        id: 'end', src: 'end_hosting_plan',
        onDone: {
          target: 'finish',
          actions: (_, event) => console.log('plan-sm:', event.data)
        },
        onError: {
          target: 'finish',
          actions: (_, event) => console.log('plan-sm:', event.data)
        }
      },
    },
    publishing: {
      actions: () => sendUpdate(),
      invoke: {
        id: 'report', src: 'publish_to_chain',
        onDone: {
          target: 'active',
          actions: (_, event) => console.log('plan-sm:', event.data)
        },
        onError: {
          target: 'finish',
          actions: (_, event) => console.log('plan-sm:', event.data)
        }
      },
    },
    finish: {
      type: 'final',
      data: {type: 'finished'}
    },
  }
}, {
  services: {
    subscribe_to_hosting_plan: new Promise((resolve, reject) => { setTimeout(() => { resolve('subscribed') }, 3000) }),
    update_hosting_plan: (context, event) => new Promise((resolve, reject) => { setTimeout(() => { 
      console.log(context)
      resolve('updated') }, 3000) 
    }),
    pause_hosting_plan: new Promise((resolve, reject) => { setTimeout(() => { resolve('paused') }, 3000) }),
    resume_hosting_plan: new Promise((resolve, reject) => { setTimeout(() => { resolve('resumed') }, 3000) }),
    end_hosting_plan: new Promise((resolve, reject) => { setTimeout(() => { resolve('ended') }, 3000) }),
    publish_to_chain: new Promise((resolve, reject) => { setTimeout(() => { resolve('published') }, 3000) }),
  }
})
